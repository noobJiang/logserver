// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event_log.proto

package event_log

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// network & ges info
type EventLog_Carrier int32

const (
	EventLog_CARRIER_UNKNOWN EventLog_Carrier = 0
	EventLog_CARRIER_CM      EventLog_Carrier = 1
	EventLog_CARRIER_CU      EventLog_Carrier = 2
	EventLog_CARRIER_CT      EventLog_Carrier = 3
)

var EventLog_Carrier_name = map[int32]string{
	0: "CARRIER_UNKNOWN",
	1: "CARRIER_CM",
	2: "CARRIER_CU",
	3: "CARRIER_CT",
}

var EventLog_Carrier_value = map[string]int32{
	"CARRIER_UNKNOWN": 0,
	"CARRIER_CM":      1,
	"CARRIER_CU":      2,
	"CARRIER_CT":      3,
}

func (x EventLog_Carrier) String() string {
	return proto.EnumName(EventLog_Carrier_name, int32(x))
}

func (EventLog_Carrier) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_443313318a2fd90c, []int{0, 0}
}

type EventLog_Network int32

const (
	EventLog_NETWORK_UNKNOWN EventLog_Network = 0
	EventLog_NETWORK_WIFI    EventLog_Network = 1
	EventLog_NETWORK_2G      EventLog_Network = 2
	EventLog_NETWORK_3G      EventLog_Network = 3
	EventLog_NETWORK_4G      EventLog_Network = 4
	EventLog_NETWORK_5G      EventLog_Network = 5
)

var EventLog_Network_name = map[int32]string{
	0: "NETWORK_UNKNOWN",
	1: "NETWORK_WIFI",
	2: "NETWORK_2G",
	3: "NETWORK_3G",
	4: "NETWORK_4G",
	5: "NETWORK_5G",
}

var EventLog_Network_value = map[string]int32{
	"NETWORK_UNKNOWN": 0,
	"NETWORK_WIFI":    1,
	"NETWORK_2G":      2,
	"NETWORK_3G":      3,
	"NETWORK_4G":      4,
	"NETWORK_5G":      5,
}

func (x EventLog_Network) String() string {
	return proto.EnumName(EventLog_Network_name, int32(x))
}

func (EventLog_Network) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_443313318a2fd90c, []int{0, 1}
}

type EventLog struct {
	// base info
	EventId    string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventTime  int64  `protobuf:"varint,2,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	LoggedTime int64  `protobuf:"varint,3,opt,name=logged_time,json=loggedTime,proto3" json:"logged_time,omitempty"`
	SessionId  string `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Udid       string `protobuf:"bytes,5,opt,name=udid,proto3" json:"udid,omitempty"`
	Tkid       string `protobuf:"bytes,6,opt,name=tkid,proto3" json:"tkid,omitempty"`
	Mid        string `protobuf:"bytes,7,opt,name=mid,proto3" json:"mid,omitempty"`
	Platform   string `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	AppVersion string `protobuf:"bytes,9,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	AppChannel string `protobuf:"bytes,10,opt,name=app_channel,json=appChannel,proto3" json:"app_channel,omitempty"`
	AppType    string `protobuf:"bytes,11,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
	UserAgent  string `protobuf:"bytes,12,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Event      string `protobuf:"bytes,13,opt,name=event,proto3" json:"event,omitempty"`
	Env        string `protobuf:"bytes,14,opt,name=env,proto3" json:"env,omitempty"`
	// device info
	Os               string           `protobuf:"bytes,20,opt,name=os,proto3" json:"os,omitempty"`
	OsVersion        string           `protobuf:"bytes,21,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	DeviceModel      string           `protobuf:"bytes,22,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	DeviceVendor     string           `protobuf:"bytes,23,opt,name=device_vendor,json=deviceVendor,proto3" json:"device_vendor,omitempty"`
	DeviceBrand      string           `protobuf:"bytes,24,opt,name=device_brand,json=deviceBrand,proto3" json:"device_brand,omitempty"`
	ScreenSize       string           `protobuf:"bytes,25,opt,name=screen_size,json=screenSize,proto3" json:"screen_size,omitempty"`
	ScreenWidth      int32            `protobuf:"varint,26,opt,name=screen_width,json=screenWidth,proto3" json:"screen_width,omitempty"`
	ScreenHeight     int32            `protobuf:"varint,27,opt,name=screen_height,json=screenHeight,proto3" json:"screen_height,omitempty"`
	ScreenResolution string           `protobuf:"bytes,28,opt,name=screen_resolution,json=screenResolution,proto3" json:"screen_resolution,omitempty"`
	Imei             string           `protobuf:"bytes,29,opt,name=imei,proto3" json:"imei,omitempty"`
	AndroidId        string           `protobuf:"bytes,30,opt,name=android_id,json=androidId,proto3" json:"android_id,omitempty"`
	Idfa             string           `protobuf:"bytes,31,opt,name=idfa,proto3" json:"idfa,omitempty"`
	Oaid             string           `protobuf:"bytes,32,opt,name=oaid,proto3" json:"oaid,omitempty"`
	Carrier          EventLog_Carrier `protobuf:"varint,40,opt,name=carrier,proto3,enum=EventLog_Carrier" json:"carrier,omitempty"`
	Network          EventLog_Network `protobuf:"varint,41,opt,name=network,proto3,enum=EventLog_Network" json:"network,omitempty"`
	Ip               string           `protobuf:"bytes,42,opt,name=ip,proto3" json:"ip,omitempty"`
	IpCountry        string           `protobuf:"bytes,43,opt,name=ip_country,json=ipCountry,proto3" json:"ip_country,omitempty"`
	IpProvince       string           `protobuf:"bytes,44,opt,name=ip_province,json=ipProvince,proto3" json:"ip_province,omitempty"`
	IpCity           string           `protobuf:"bytes,45,opt,name=ip_city,json=ipCity,proto3" json:"ip_city,omitempty"`
	Lon              string           `protobuf:"bytes,46,opt,name=lon,proto3" json:"lon,omitempty"`
	Lat              string           `protobuf:"bytes,47,opt,name=lat,proto3" json:"lat,omitempty"`
	Mac              string           `protobuf:"bytes,48,opt,name=mac,proto3" json:"mac,omitempty"`
	// event info
	PageId     string `protobuf:"bytes,80,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	PvId       string `protobuf:"bytes,81,opt,name=pv_id,json=pvId,proto3" json:"pv_id,omitempty"`
	LayoutId   string `protobuf:"bytes,82,opt,name=layout_id,json=layoutId,proto3" json:"layout_id,omitempty"`
	PageKey    string `protobuf:"bytes,83,opt,name=page_key,json=pageKey,proto3" json:"page_key,omitempty"`
	ModuleId   string `protobuf:"bytes,84,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	ActionType string `protobuf:"bytes,85,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	// ref event info
	RefPageId   string `protobuf:"bytes,90,opt,name=ref_page_id,json=refPageId,proto3" json:"ref_page_id,omitempty"`
	RefPvId     string `protobuf:"bytes,91,opt,name=ref_pv_id,json=refPvId,proto3" json:"ref_pv_id,omitempty"`
	RefLayoutId string `protobuf:"bytes,92,opt,name=ref_layout_id,json=refLayoutId,proto3" json:"ref_layout_id,omitempty"`
	RefPageKey  string `protobuf:"bytes,93,opt,name=ref_page_key,json=refPageKey,proto3" json:"ref_page_key,omitempty"`
	RefModuleId string `protobuf:"bytes,94,opt,name=ref_module_id,json=refModuleId,proto3" json:"ref_module_id,omitempty"`
	Referer     string `protobuf:"bytes,99,opt,name=referer,proto3" json:"referer,omitempty"`
	// event data
	Duration   int64             `protobuf:"varint,100,opt,name=duration,proto3" json:"duration,omitempty"`
	ExtendInfo map[string]string `protobuf:"bytes,200,rep,name=extend_info,json=extendInfo,proto3" json:"extend_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *EventLog) Reset()         { *m = EventLog{} }
func (m *EventLog) String() string { return proto.CompactTextString(m) }
func (*EventLog) ProtoMessage()    {}
func (*EventLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_443313318a2fd90c, []int{0}
}
func (m *EventLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLog.Merge(m, src)
}
func (m *EventLog) XXX_Size() int {
	return m.Size()
}
func (m *EventLog) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLog.DiscardUnknown(m)
}

var xxx_messageInfo_EventLog proto.InternalMessageInfo

func (m *EventLog) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *EventLog) GetEventTime() int64 {
	if m != nil {
		return m.EventTime
	}
	return 0
}

func (m *EventLog) GetLoggedTime() int64 {
	if m != nil {
		return m.LoggedTime
	}
	return 0
}

func (m *EventLog) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *EventLog) GetUdid() string {
	if m != nil {
		return m.Udid
	}
	return ""
}

func (m *EventLog) GetTkid() string {
	if m != nil {
		return m.Tkid
	}
	return ""
}

func (m *EventLog) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

func (m *EventLog) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *EventLog) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *EventLog) GetAppChannel() string {
	if m != nil {
		return m.AppChannel
	}
	return ""
}

func (m *EventLog) GetAppType() string {
	if m != nil {
		return m.AppType
	}
	return ""
}

func (m *EventLog) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *EventLog) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EventLog) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *EventLog) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *EventLog) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *EventLog) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *EventLog) GetDeviceVendor() string {
	if m != nil {
		return m.DeviceVendor
	}
	return ""
}

func (m *EventLog) GetDeviceBrand() string {
	if m != nil {
		return m.DeviceBrand
	}
	return ""
}

func (m *EventLog) GetScreenSize() string {
	if m != nil {
		return m.ScreenSize
	}
	return ""
}

func (m *EventLog) GetScreenWidth() int32 {
	if m != nil {
		return m.ScreenWidth
	}
	return 0
}

func (m *EventLog) GetScreenHeight() int32 {
	if m != nil {
		return m.ScreenHeight
	}
	return 0
}

func (m *EventLog) GetScreenResolution() string {
	if m != nil {
		return m.ScreenResolution
	}
	return ""
}

func (m *EventLog) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *EventLog) GetAndroidId() string {
	if m != nil {
		return m.AndroidId
	}
	return ""
}

func (m *EventLog) GetIdfa() string {
	if m != nil {
		return m.Idfa
	}
	return ""
}

func (m *EventLog) GetOaid() string {
	if m != nil {
		return m.Oaid
	}
	return ""
}

func (m *EventLog) GetCarrier() EventLog_Carrier {
	if m != nil {
		return m.Carrier
	}
	return EventLog_CARRIER_UNKNOWN
}

func (m *EventLog) GetNetwork() EventLog_Network {
	if m != nil {
		return m.Network
	}
	return EventLog_NETWORK_UNKNOWN
}

func (m *EventLog) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *EventLog) GetIpCountry() string {
	if m != nil {
		return m.IpCountry
	}
	return ""
}

func (m *EventLog) GetIpProvince() string {
	if m != nil {
		return m.IpProvince
	}
	return ""
}

func (m *EventLog) GetIpCity() string {
	if m != nil {
		return m.IpCity
	}
	return ""
}

func (m *EventLog) GetLon() string {
	if m != nil {
		return m.Lon
	}
	return ""
}

func (m *EventLog) GetLat() string {
	if m != nil {
		return m.Lat
	}
	return ""
}

func (m *EventLog) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *EventLog) GetPageId() string {
	if m != nil {
		return m.PageId
	}
	return ""
}

func (m *EventLog) GetPvId() string {
	if m != nil {
		return m.PvId
	}
	return ""
}

func (m *EventLog) GetLayoutId() string {
	if m != nil {
		return m.LayoutId
	}
	return ""
}

func (m *EventLog) GetPageKey() string {
	if m != nil {
		return m.PageKey
	}
	return ""
}

func (m *EventLog) GetModuleId() string {
	if m != nil {
		return m.ModuleId
	}
	return ""
}

func (m *EventLog) GetActionType() string {
	if m != nil {
		return m.ActionType
	}
	return ""
}

func (m *EventLog) GetRefPageId() string {
	if m != nil {
		return m.RefPageId
	}
	return ""
}

func (m *EventLog) GetRefPvId() string {
	if m != nil {
		return m.RefPvId
	}
	return ""
}

func (m *EventLog) GetRefLayoutId() string {
	if m != nil {
		return m.RefLayoutId
	}
	return ""
}

func (m *EventLog) GetRefPageKey() string {
	if m != nil {
		return m.RefPageKey
	}
	return ""
}

func (m *EventLog) GetRefModuleId() string {
	if m != nil {
		return m.RefModuleId
	}
	return ""
}

func (m *EventLog) GetReferer() string {
	if m != nil {
		return m.Referer
	}
	return ""
}

func (m *EventLog) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *EventLog) GetExtendInfo() map[string]string {
	if m != nil {
		return m.ExtendInfo
	}
	return nil
}

// 事件通用属性
type EventLogCommon struct {
	Udid             string           `protobuf:"bytes,1,opt,name=udid,proto3" json:"udid,omitempty"`
	Tkid             string           `protobuf:"bytes,2,opt,name=tkid,proto3" json:"tkid,omitempty"`
	Mid              string           `protobuf:"bytes,3,opt,name=mid,proto3" json:"mid,omitempty"`
	Platform         string           `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	AppVersion       string           `protobuf:"bytes,5,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	AppChannel       string           `protobuf:"bytes,6,opt,name=app_channel,json=appChannel,proto3" json:"app_channel,omitempty"`
	AppType          string           `protobuf:"bytes,7,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
	Env              string           `protobuf:"bytes,8,opt,name=env,proto3" json:"env,omitempty"`
	Os               string           `protobuf:"bytes,10,opt,name=os,proto3" json:"os,omitempty"`
	OsVersion        string           `protobuf:"bytes,11,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	DeviceModel      string           `protobuf:"bytes,12,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	DeviceVendor     string           `protobuf:"bytes,13,opt,name=device_vendor,json=deviceVendor,proto3" json:"device_vendor,omitempty"`
	DeviceBrand      string           `protobuf:"bytes,14,opt,name=device_brand,json=deviceBrand,proto3" json:"device_brand,omitempty"`
	ScreenSize       string           `protobuf:"bytes,15,opt,name=screen_size,json=screenSize,proto3" json:"screen_size,omitempty"`
	ScreenWidth      int32            `protobuf:"varint,16,opt,name=screen_width,json=screenWidth,proto3" json:"screen_width,omitempty"`
	ScreenHeight     int32            `protobuf:"varint,17,opt,name=screen_height,json=screenHeight,proto3" json:"screen_height,omitempty"`
	ScreenResolution string           `protobuf:"bytes,18,opt,name=screen_resolution,json=screenResolution,proto3" json:"screen_resolution,omitempty"`
	Imei             string           `protobuf:"bytes,19,opt,name=imei,proto3" json:"imei,omitempty"`
	AndroidId        string           `protobuf:"bytes,20,opt,name=android_id,json=androidId,proto3" json:"android_id,omitempty"`
	Idfa             string           `protobuf:"bytes,21,opt,name=idfa,proto3" json:"idfa,omitempty"`
	Oaid             string           `protobuf:"bytes,22,opt,name=oaid,proto3" json:"oaid,omitempty"`
	Carrier          EventLog_Carrier `protobuf:"varint,30,opt,name=carrier,proto3,enum=EventLog_Carrier" json:"carrier,omitempty"`
	Network          EventLog_Network `protobuf:"varint,31,opt,name=network,proto3,enum=EventLog_Network" json:"network,omitempty"`
	Lon              string           `protobuf:"bytes,32,opt,name=lon,proto3" json:"lon,omitempty"`
	Lat              string           `protobuf:"bytes,33,opt,name=lat,proto3" json:"lat,omitempty"`
	Mac              string           `protobuf:"bytes,34,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (m *EventLogCommon) Reset()         { *m = EventLogCommon{} }
func (m *EventLogCommon) String() string { return proto.CompactTextString(m) }
func (*EventLogCommon) ProtoMessage()    {}
func (*EventLogCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_443313318a2fd90c, []int{1}
}
func (m *EventLogCommon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLogCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLogCommon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLogCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLogCommon.Merge(m, src)
}
func (m *EventLogCommon) XXX_Size() int {
	return m.Size()
}
func (m *EventLogCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLogCommon.DiscardUnknown(m)
}

var xxx_messageInfo_EventLogCommon proto.InternalMessageInfo

func (m *EventLogCommon) GetUdid() string {
	if m != nil {
		return m.Udid
	}
	return ""
}

func (m *EventLogCommon) GetTkid() string {
	if m != nil {
		return m.Tkid
	}
	return ""
}

func (m *EventLogCommon) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

func (m *EventLogCommon) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *EventLogCommon) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *EventLogCommon) GetAppChannel() string {
	if m != nil {
		return m.AppChannel
	}
	return ""
}

func (m *EventLogCommon) GetAppType() string {
	if m != nil {
		return m.AppType
	}
	return ""
}

func (m *EventLogCommon) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *EventLogCommon) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *EventLogCommon) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *EventLogCommon) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *EventLogCommon) GetDeviceVendor() string {
	if m != nil {
		return m.DeviceVendor
	}
	return ""
}

func (m *EventLogCommon) GetDeviceBrand() string {
	if m != nil {
		return m.DeviceBrand
	}
	return ""
}

func (m *EventLogCommon) GetScreenSize() string {
	if m != nil {
		return m.ScreenSize
	}
	return ""
}

func (m *EventLogCommon) GetScreenWidth() int32 {
	if m != nil {
		return m.ScreenWidth
	}
	return 0
}

func (m *EventLogCommon) GetScreenHeight() int32 {
	if m != nil {
		return m.ScreenHeight
	}
	return 0
}

func (m *EventLogCommon) GetScreenResolution() string {
	if m != nil {
		return m.ScreenResolution
	}
	return ""
}

func (m *EventLogCommon) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *EventLogCommon) GetAndroidId() string {
	if m != nil {
		return m.AndroidId
	}
	return ""
}

func (m *EventLogCommon) GetIdfa() string {
	if m != nil {
		return m.Idfa
	}
	return ""
}

func (m *EventLogCommon) GetOaid() string {
	if m != nil {
		return m.Oaid
	}
	return ""
}

func (m *EventLogCommon) GetCarrier() EventLog_Carrier {
	if m != nil {
		return m.Carrier
	}
	return EventLog_CARRIER_UNKNOWN
}

func (m *EventLogCommon) GetNetwork() EventLog_Network {
	if m != nil {
		return m.Network
	}
	return EventLog_NETWORK_UNKNOWN
}

func (m *EventLogCommon) GetLon() string {
	if m != nil {
		return m.Lon
	}
	return ""
}

func (m *EventLogCommon) GetLat() string {
	if m != nil {
		return m.Lat
	}
	return ""
}

func (m *EventLogCommon) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type EventLogs struct {
	Common *EventLogCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Events []*EventLog     `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *EventLogs) Reset()         { *m = EventLogs{} }
func (m *EventLogs) String() string { return proto.CompactTextString(m) }
func (*EventLogs) ProtoMessage()    {}
func (*EventLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_443313318a2fd90c, []int{2}
}
func (m *EventLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLogs.Merge(m, src)
}
func (m *EventLogs) XXX_Size() int {
	return m.Size()
}
func (m *EventLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLogs.DiscardUnknown(m)
}

var xxx_messageInfo_EventLogs proto.InternalMessageInfo

func (m *EventLogs) GetCommon() *EventLogCommon {
	if m != nil {
		return m.Common
	}
	return nil
}

func (m *EventLogs) GetEvents() []*EventLog {
	if m != nil {
		return m.Events
	}
	return nil
}

type Response struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_443313318a2fd90c, []int{3}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_443313318a2fd90c, []int{4}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("EventLog_Carrier", EventLog_Carrier_name, EventLog_Carrier_value)
	proto.RegisterEnum("EventLog_Network", EventLog_Network_name, EventLog_Network_value)
	proto.RegisterType((*EventLog)(nil), "EventLog")
	proto.RegisterMapType((map[string]string)(nil), "EventLog.ExtendInfoEntry")
	proto.RegisterType((*EventLogCommon)(nil), "EventLogCommon")
	proto.RegisterType((*EventLogs)(nil), "EventLogs")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*Empty)(nil), "Empty")
}

func init() { proto.RegisterFile("event_log.proto", fileDescriptor_443313318a2fd90c) }

var fileDescriptor_443313318a2fd90c = []byte{
	// 1316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6e, 0x1b, 0xb7,
	0x13, 0xf7, 0x4a, 0x96, 0x64, 0x51, 0xb6, 0xac, 0x30, 0x5f, 0x8c, 0xf3, 0x8f, 0xa2, 0xe8, 0x7f,
	0xa8, 0x9a, 0xb4, 0x52, 0xe0, 0xb4, 0x40, 0x90, 0xa2, 0x87, 0x44, 0x50, 0x5d, 0x21, 0xb1, 0xe3,
	0xae, 0x9d, 0x18, 0xe8, 0x97, 0xb0, 0x16, 0xa9, 0x35, 0x91, 0x5d, 0x92, 0xe0, 0x72, 0x95, 0x2a,
	0xc7, 0x3e, 0x41, 0x81, 0x3e, 0x43, 0xdf, 0xa3, 0xc7, 0x1c, 0x03, 0xf4, 0xd2, 0x63, 0x91, 0xf4,
	0x01, 0xfa, 0x08, 0xc5, 0x90, 0xbb, 0xb2, 0x9d, 0x38, 0xb1, 0x7b, 0xe3, 0xfc, 0xe6, 0x83, 0xc3,
	0xd9, 0x99, 0xf9, 0x2d, 0x5a, 0x65, 0x53, 0x26, 0xcc, 0x28, 0x92, 0x61, 0x57, 0x69, 0x69, 0xe4,
	0xda, 0x20, 0xe4, 0xe6, 0x20, 0xdd, 0xef, 0x8e, 0x65, 0xdc, 0x8b, 0x99, 0x09, 0xa6, 0x4c, 0x27,
	0xac, 0x67, 0x74, 0x9a, 0x24, 0x3d, 0xca, 0x26, 0x46, 0x33, 0xd6, 0x0b, 0xa5, 0x0c, 0x23, 0x66,
	0x0e, 0xb8, 0xa6, 0x2a, 0xd0, 0x66, 0xd6, 0x0b, 0x84, 0x90, 0x26, 0x30, 0x5c, 0x8a, 0x24, 0x0b,
	0x73, 0xd5, 0xd9, 0xf4, 0xac, 0xb4, 0x9f, 0x4e, 0x7a, 0x2c, 0x56, 0x66, 0xe6, 0x94, 0xed, 0xdf,
	0x57, 0xd0, 0xd2, 0x00, 0xee, 0x7d, 0x24, 0x43, 0x7c, 0x05, 0x2d, 0xb9, 0x1c, 0x38, 0x25, 0x5e,
	0xcb, 0xeb, 0x54, 0xfd, 0x8a, 0x95, 0x87, 0x14, 0x5f, 0x43, 0xc8, 0xa9, 0x0c, 0x8f, 0x19, 0x29,
	0xb4, 0xbc, 0x4e, 0xd1, 0xaf, 0x5a, 0x64, 0x97, 0xc7, 0x0c, 0x5f, 0x47, 0xb5, 0x48, 0x86, 0x21,
	0xa3, 0x4e, 0x5f, 0xb4, 0x7a, 0xe4, 0x20, 0x6b, 0x70, 0x0d, 0xa1, 0x84, 0x25, 0x09, 0x97, 0x02,
	0x82, 0x2f, 0xda, 0xe0, 0xd5, 0x0c, 0x19, 0x52, 0x8c, 0xd1, 0x62, 0x4a, 0x39, 0x25, 0x25, 0xab,
	0xb0, 0x67, 0xc0, 0xcc, 0x33, 0x4e, 0x49, 0xd9, 0x61, 0x70, 0xc6, 0x0d, 0x54, 0x8c, 0x39, 0x25,
	0x15, 0x0b, 0xc1, 0x11, 0xaf, 0xa1, 0x25, 0x15, 0x05, 0x66, 0x22, 0x75, 0x4c, 0x96, 0x2c, 0x3c,
	0x97, 0x21, 0xab, 0x40, 0xa9, 0x11, 0xd4, 0x8d, 0x4b, 0x41, 0xaa, 0x56, 0x8d, 0x02, 0xa5, 0x9e,
	0x3a, 0x24, 0x37, 0x18, 0x1f, 0x04, 0x42, 0xb0, 0x88, 0xa0, 0xb9, 0x41, 0xdf, 0x21, 0x50, 0x11,
	0x30, 0x30, 0x33, 0xc5, 0x48, 0xcd, 0x55, 0x24, 0x50, 0x6a, 0x77, 0xa6, 0xec, 0x8b, 0xd2, 0x84,
	0xe9, 0x51, 0x10, 0x32, 0x61, 0xc8, 0xb2, 0x7b, 0x11, 0x20, 0xf7, 0x01, 0xc0, 0x17, 0x50, 0xc9,
	0x96, 0x87, 0xac, 0x58, 0x8d, 0x13, 0x20, 0x7f, 0x26, 0xa6, 0xa4, 0xee, 0xf2, 0x67, 0x62, 0x8a,
	0xeb, 0xa8, 0x20, 0x13, 0x72, 0xc1, 0x02, 0x05, 0x99, 0x40, 0x58, 0x99, 0xcc, 0x53, 0xbe, 0xe8,
	0xc2, 0xca, 0x24, 0xcf, 0xf8, 0x06, 0x5a, 0xa6, 0x6c, 0xca, 0xc7, 0x6c, 0x14, 0x4b, 0xca, 0x22,
	0x72, 0xc9, 0x1a, 0xd4, 0x1c, 0xb6, 0x09, 0x10, 0xfe, 0x3f, 0x5a, 0xc9, 0x4c, 0xa6, 0x4c, 0x50,
	0xa9, 0xc9, 0x65, 0x6b, 0x93, 0xf9, 0x3d, 0xb5, 0xd8, 0x91, 0x38, 0xfb, 0x3a, 0x10, 0x94, 0x90,
	0xa3, 0x71, 0x1e, 0x00, 0x04, 0xc5, 0x49, 0xc6, 0x9a, 0x31, 0x31, 0x4a, 0xf8, 0x0b, 0x46, 0xae,
	0xb8, 0xe2, 0x38, 0x68, 0x87, 0xbf, 0x60, 0x10, 0x23, 0x33, 0x78, 0xce, 0xa9, 0x39, 0x20, 0x6b,
	0x2d, 0xaf, 0x53, 0xf2, 0x33, 0xa7, 0x3d, 0x80, 0x20, 0x97, 0xcc, 0xe4, 0x80, 0xf1, 0xf0, 0xc0,
	0x90, 0xab, 0xd6, 0x26, 0xf3, 0xfb, 0xda, 0x62, 0xf8, 0x16, 0x3a, 0x97, 0x19, 0x69, 0x96, 0xc8,
	0x28, 0x85, 0xe6, 0x25, 0xff, 0xb3, 0xd7, 0x35, 0x9c, 0xc2, 0x9f, 0xe3, 0xd0, 0x15, 0x3c, 0x66,
	0x9c, 0x5c, 0x73, 0x5d, 0x01, 0x67, 0xa8, 0x59, 0x20, 0xa8, 0x96, 0x9c, 0x42, 0x73, 0x35, 0x5d,
	0xcd, 0x32, 0xc4, 0x35, 0x17, 0xa7, 0x93, 0x80, 0x5c, 0xcf, 0x5c, 0xe8, 0x24, 0x00, 0x4c, 0x06,
	0x9c, 0x92, 0x96, 0xc3, 0xe0, 0x8c, 0x6f, 0xa1, 0xca, 0x38, 0xd0, 0x9a, 0x33, 0x4d, 0x3a, 0x2d,
	0xaf, 0x53, 0x5f, 0x3f, 0xd7, 0xcd, 0x47, 0xa3, 0xdb, 0x77, 0x0a, 0x3f, 0xb7, 0x00, 0x63, 0xc1,
	0xcc, 0x73, 0xa9, 0x9f, 0x91, 0x8f, 0xdf, 0x36, 0xde, 0x72, 0x0a, 0x3f, 0xb7, 0x80, 0x8f, 0xcc,
	0x15, 0xb9, 0xe9, 0x3e, 0x32, 0x57, 0x90, 0x30, 0x57, 0xa3, 0xb1, 0x4c, 0x85, 0xd1, 0x33, 0x72,
	0xcb, 0x25, 0xcc, 0x55, 0xdf, 0x01, 0x50, 0x79, 0xae, 0x46, 0x4a, 0xcb, 0x29, 0x17, 0x63, 0x46,
	0x3e, 0x71, 0x95, 0xe7, 0x6a, 0x3b, 0x43, 0xf0, 0x65, 0x54, 0x01, 0x7f, 0x6e, 0x66, 0xe4, 0x53,
	0xab, 0x2c, 0x73, 0xd5, 0xe7, 0x66, 0x06, 0xfd, 0x15, 0x49, 0x41, 0xba, 0xae, 0xbf, 0x22, 0x29,
	0x2c, 0x12, 0x18, 0xd2, 0xcb, 0x90, 0xc0, 0xf6, 0x60, 0x1c, 0x8c, 0xc9, 0xed, 0x6c, 0x86, 0x82,
	0x31, 0x84, 0x53, 0x41, 0xc8, 0xa0, 0x78, 0xdb, 0x2e, 0x1c, 0x88, 0x43, 0x8a, 0xcf, 0xa3, 0x92,
	0x9a, 0x02, 0xfc, 0x8d, 0x2b, 0x93, 0x9a, 0x0e, 0x29, 0xbe, 0x8a, 0xaa, 0x51, 0x30, 0x93, 0xa9,
	0x5d, 0x13, 0xbe, 0x1b, 0x39, 0x07, 0x0c, 0x29, 0x0c, 0x8c, 0x0d, 0xf5, 0x8c, 0xcd, 0xc8, 0x8e,
	0x1b, 0x18, 0x90, 0x1f, 0xb2, 0x19, 0xf8, 0xc5, 0x92, 0xa6, 0x91, 0xbd, 0x67, 0xd7, 0xf9, 0x39,
	0x60, 0x68, 0x9b, 0x2d, 0x18, 0xc3, 0x07, 0x76, 0xb3, 0xf6, 0x24, 0x9b, 0x44, 0x0b, 0xd9, 0x71,
	0x6b, 0xa2, 0x9a, 0x66, 0x93, 0x51, 0x9e, 0xe7, 0xb7, 0xae, 0x66, 0x9a, 0x4d, 0xb6, 0x5d, 0xaa,
	0x6b, 0xa8, 0x6a, 0xf5, 0x36, 0xdd, 0xef, 0xdc, 0xcd, 0xa0, 0x85, 0x8c, 0xdb, 0x68, 0x05, 0x74,
	0x87, 0x59, 0x7f, 0xef, 0xba, 0x5d, 0xb3, 0xc9, 0xa3, 0x3c, 0xf1, 0x16, 0x5a, 0x9e, 0xc7, 0x87,
	0xe4, 0x7f, 0x70, 0x19, 0x64, 0x17, 0x40, 0xfe, 0x59, 0x94, 0xc3, 0x37, 0xfc, 0x38, 0x8f, 0xb2,
	0x99, 0x3f, 0x83, 0x20, 0xb8, 0x94, 0x69, 0xa6, 0xc9, 0x78, 0x9e, 0x03, 0x88, 0xb0, 0xa7, 0x68,
	0xaa, 0xed, 0x62, 0x26, 0xd4, 0xae, 0xc7, 0xb9, 0x8c, 0xbf, 0x40, 0x35, 0xf6, 0x93, 0x61, 0x82,
	0x8e, 0xb8, 0x98, 0x48, 0xf2, 0xd2, 0x6b, 0x15, 0x3b, 0xb5, 0xf5, 0x2b, 0x87, 0x0d, 0x35, 0xb0,
	0xda, 0xa1, 0x98, 0xc8, 0x01, 0x34, 0x88, 0x8f, 0xd8, 0x1c, 0x58, 0xfb, 0x12, 0xad, 0xbe, 0xa5,
	0x86, 0x2f, 0x0c, 0x4f, 0x70, 0x2b, 0x1c, 0x8e, 0xb0, 0x8d, 0xa6, 0x41, 0x94, 0xba, 0xcd, 0x5d,
	0xf5, 0x9d, 0x70, 0xaf, 0x70, 0xd7, 0x6b, 0x6f, 0xa1, 0x4a, 0xd6, 0xdb, 0xf8, 0x3c, 0x5a, 0xed,
	0xdf, 0xf7, 0xfd, 0xe1, 0xc0, 0x1f, 0x3d, 0xd9, 0x7a, 0xb8, 0xf5, 0x78, 0x6f, 0xab, 0xb1, 0x80,
	0xeb, 0x08, 0xe5, 0x60, 0x7f, 0xb3, 0xe1, 0x1d, 0x93, 0x9f, 0x34, 0x0a, 0xc7, 0xe4, 0xdd, 0x46,
	0xb1, 0xad, 0x50, 0x25, 0x6b, 0x7f, 0x88, 0xb7, 0x35, 0xd8, 0xdd, 0x7b, 0xec, 0x3f, 0x3c, 0x12,
	0xaf, 0x81, 0x96, 0x73, 0x70, 0x6f, 0xf8, 0xd5, 0xd0, 0x45, 0xcc, 0x91, 0xf5, 0x0d, 0x17, 0x31,
	0x97, 0xef, 0x6c, 0x34, 0x8a, 0x47, 0xe5, 0xcf, 0x36, 0x1a, 0x8b, 0x47, 0xe5, 0xcf, 0x37, 0x1a,
	0xa5, 0xf6, 0x3f, 0x25, 0x54, 0xcf, 0x2b, 0xd5, 0x97, 0x71, 0xec, 0x96, 0x84, 0xa5, 0x13, 0xef,
	0x04, 0x3a, 0x29, 0xbc, 0x4b, 0x27, 0xc5, 0x93, 0xe9, 0x64, 0xf1, 0xc3, 0x74, 0x52, 0x3a, 0x8d,
	0x4e, 0xca, 0x1f, 0xa4, 0x93, 0xca, 0x71, 0x3a, 0xc9, 0x98, 0x61, 0xe9, 0x6d, 0x66, 0x40, 0xef,
	0x61, 0x86, 0xda, 0x69, 0xcc, 0xb0, 0x7c, 0x06, 0x66, 0x58, 0x39, 0x03, 0x33, 0xd4, 0x4f, 0x65,
	0x86, 0xd5, 0x53, 0x99, 0xa1, 0x71, 0x06, 0x66, 0x38, 0x77, 0x56, 0x66, 0xc0, 0xa7, 0x30, 0xc3,
	0xf9, 0xf7, 0x32, 0xc3, 0x85, 0xf7, 0x31, 0xc3, 0xc5, 0x13, 0x98, 0xe1, 0xd2, 0xc9, 0xcc, 0xd0,
	0xfc, 0x2f, 0xcc, 0x70, 0xfd, 0x54, 0x66, 0xc8, 0x16, 0x76, 0xeb, 0x9d, 0x85, 0x7d, 0xe3, 0x9d,
	0x85, 0xdd, 0x9e, 0x2f, 0xec, 0xf6, 0x1e, 0xaa, 0xe6, 0x21, 0x13, 0xfc, 0x11, 0x2a, 0x8f, 0x6d,
	0xdb, 0xdb, 0x76, 0xaf, 0xad, 0xaf, 0x76, 0x8f, 0x4f, 0x83, 0x9f, 0xa9, 0xf1, 0x0d, 0x54, 0xb6,
	0x7f, 0x21, 0x09, 0x29, 0xd8, 0x05, 0x53, 0x9d, 0x1b, 0xfa, 0x99, 0xa2, 0x7d, 0x1b, 0x2d, 0xf9,
	0x2c, 0x51, 0x52, 0x24, 0x0c, 0x0a, 0x31, 0x96, 0x94, 0xd9, 0xa8, 0x25, 0xdf, 0x9e, 0x6d, 0x2a,
	0x49, 0x98, 0xcd, 0x10, 0x1c, 0xdb, 0x15, 0x54, 0x1a, 0xc0, 0xff, 0xe4, 0xfa, 0x6f, 0x1e, 0x42,
	0x8f, 0x64, 0xb8, 0xc3, 0x34, 0x34, 0x0a, 0xbe, 0x83, 0x96, 0x77, 0xd2, 0xfd, 0x98, 0x9b, 0x1d,
	0x2e, 0xc2, 0x88, 0xe1, 0xc3, 0xcb, 0xd6, 0xaa, 0xdd, 0xfc, 0x8e, 0xf6, 0xca, 0xcf, 0x7f, 0xfc,
	0xfd, 0x6b, 0xa1, 0xd2, 0x2e, 0xf4, 0x92, 0x7b, 0xde, 0x4d, 0x7c, 0x17, 0xd5, 0x9d, 0xd3, 0x66,
	0x1a, 0x19, 0xae, 0x22, 0x86, 0xd1, 0xdc, 0x2d, 0x39, 0xea, 0xb7, 0x6a, 0xfd, 0xaa, 0xed, 0xc5,
	0x5e, 0x9c, 0x46, 0xe0, 0xd9, 0x41, 0x8b, 0xdb, 0x5c, 0x84, 0xb8, 0xdc, 0xb5, 0xd9, 0x9c, 0x70,
	0x07, 0x2e, 0xf5, 0x14, 0x17, 0xe1, 0x03, 0xf2, 0xf2, 0x75, 0xd3, 0x7b, 0xf5, 0xba, 0xe9, 0xfd,
	0xf5, 0xba, 0xe9, 0xfd, 0xf2, 0xa6, 0xb9, 0xf0, 0xea, 0x4d, 0x73, 0xe1, 0xcf, 0x37, 0xcd, 0x85,
	0xfd, 0xb2, 0xfd, 0x25, 0xbe, 0xf3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x3f, 0x5f, 0x70,
	0x89, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	SubmitSingle(ctx context.Context, in *EventLog, opts ...grpc.CallOption) (*Response, error)
	SubmitMultiple(ctx context.Context, in *EventLogs, opts ...grpc.CallOption) (*Response, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
}

type logServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogServiceClient(cc *grpc.ClientConn) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) SubmitSingle(ctx context.Context, in *EventLog, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/LogService/SubmitSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) SubmitMultiple(ctx context.Context, in *EventLogs, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/LogService/SubmitMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/LogService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	SubmitSingle(context.Context, *EventLog) (*Response, error)
	SubmitMultiple(context.Context, *EventLogs) (*Response, error)
	Ping(context.Context, *Empty) (*Response, error)
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) SubmitSingle(ctx context.Context, req *EventLog) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSingle not implemented")
}
func (*UnimplementedLogServiceServer) SubmitMultiple(ctx context.Context, req *EventLogs) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMultiple not implemented")
}
func (*UnimplementedLogServiceServer) Ping(ctx context.Context, req *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_SubmitSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SubmitSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LogService/SubmitSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SubmitSingle(ctx, req.(*EventLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_SubmitMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventLogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SubmitMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LogService/SubmitMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SubmitMultiple(ctx, req.(*EventLogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LogService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitSingle",
			Handler:    _LogService_SubmitSingle_Handler,
		},
		{
			MethodName: "SubmitMultiple",
			Handler:    _LogService_SubmitMultiple_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _LogService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event_log.proto",
}

func (m *EventLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.EventId)))
		i += copy(dAtA[i:], m.EventId)
	}
	if m.EventTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.EventTime))
	}
	if m.LoggedTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.LoggedTime))
	}
	if len(m.SessionId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.SessionId)))
		i += copy(dAtA[i:], m.SessionId)
	}
	if len(m.Udid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Udid)))
		i += copy(dAtA[i:], m.Udid)
	}
	if len(m.Tkid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Tkid)))
		i += copy(dAtA[i:], m.Tkid)
	}
	if len(m.Mid) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Mid)))
		i += copy(dAtA[i:], m.Mid)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.AppVersion) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.AppVersion)))
		i += copy(dAtA[i:], m.AppVersion)
	}
	if len(m.AppChannel) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.AppChannel)))
		i += copy(dAtA[i:], m.AppChannel)
	}
	if len(m.AppType) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.AppType)))
		i += copy(dAtA[i:], m.AppType)
	}
	if len(m.UserAgent) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.UserAgent)))
		i += copy(dAtA[i:], m.UserAgent)
	}
	if len(m.Event) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	if len(m.Env) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Env)))
		i += copy(dAtA[i:], m.Env)
	}
	if len(m.Os) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	if len(m.OsVersion) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.OsVersion)))
		i += copy(dAtA[i:], m.OsVersion)
	}
	if len(m.DeviceModel) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.DeviceModel)))
		i += copy(dAtA[i:], m.DeviceModel)
	}
	if len(m.DeviceVendor) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.DeviceVendor)))
		i += copy(dAtA[i:], m.DeviceVendor)
	}
	if len(m.DeviceBrand) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.DeviceBrand)))
		i += copy(dAtA[i:], m.DeviceBrand)
	}
	if len(m.ScreenSize) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.ScreenSize)))
		i += copy(dAtA[i:], m.ScreenSize)
	}
	if m.ScreenWidth != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.ScreenWidth))
	}
	if m.ScreenHeight != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.ScreenHeight))
	}
	if len(m.ScreenResolution) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.ScreenResolution)))
		i += copy(dAtA[i:], m.ScreenResolution)
	}
	if len(m.Imei) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Imei)))
		i += copy(dAtA[i:], m.Imei)
	}
	if len(m.AndroidId) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.AndroidId)))
		i += copy(dAtA[i:], m.AndroidId)
	}
	if len(m.Idfa) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Idfa)))
		i += copy(dAtA[i:], m.Idfa)
	}
	if len(m.Oaid) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Oaid)))
		i += copy(dAtA[i:], m.Oaid)
	}
	if m.Carrier != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.Carrier))
	}
	if m.Network != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.Network))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.IpCountry) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.IpCountry)))
		i += copy(dAtA[i:], m.IpCountry)
	}
	if len(m.IpProvince) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.IpProvince)))
		i += copy(dAtA[i:], m.IpProvince)
	}
	if len(m.IpCity) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.IpCity)))
		i += copy(dAtA[i:], m.IpCity)
	}
	if len(m.Lon) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Lon)))
		i += copy(dAtA[i:], m.Lon)
	}
	if len(m.Lat) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Lat)))
		i += copy(dAtA[i:], m.Lat)
	}
	if len(m.Mac) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Mac)))
		i += copy(dAtA[i:], m.Mac)
	}
	if len(m.PageId) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.PageId)))
		i += copy(dAtA[i:], m.PageId)
	}
	if len(m.PvId) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.PvId)))
		i += copy(dAtA[i:], m.PvId)
	}
	if len(m.LayoutId) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.LayoutId)))
		i += copy(dAtA[i:], m.LayoutId)
	}
	if len(m.PageKey) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.PageKey)))
		i += copy(dAtA[i:], m.PageKey)
	}
	if len(m.ModuleId) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.ModuleId)))
		i += copy(dAtA[i:], m.ModuleId)
	}
	if len(m.ActionType) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.ActionType)))
		i += copy(dAtA[i:], m.ActionType)
	}
	if len(m.RefPageId) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.RefPageId)))
		i += copy(dAtA[i:], m.RefPageId)
	}
	if len(m.RefPvId) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.RefPvId)))
		i += copy(dAtA[i:], m.RefPvId)
	}
	if len(m.RefLayoutId) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.RefLayoutId)))
		i += copy(dAtA[i:], m.RefLayoutId)
	}
	if len(m.RefPageKey) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.RefPageKey)))
		i += copy(dAtA[i:], m.RefPageKey)
	}
	if len(m.RefModuleId) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.RefModuleId)))
		i += copy(dAtA[i:], m.RefModuleId)
	}
	if len(m.Referer) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Referer)))
		i += copy(dAtA[i:], m.Referer)
	}
	if m.Duration != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.Duration))
	}
	if len(m.ExtendInfo) > 0 {
		for k, _ := range m.ExtendInfo {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0xc
			i++
			v := m.ExtendInfo[k]
			mapSize := 1 + len(k) + sovEventLog(uint64(len(k))) + 1 + len(v) + sovEventLog(uint64(len(v)))
			i = encodeVarintEventLog(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEventLog(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintEventLog(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *EventLogCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLogCommon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Udid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Udid)))
		i += copy(dAtA[i:], m.Udid)
	}
	if len(m.Tkid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Tkid)))
		i += copy(dAtA[i:], m.Tkid)
	}
	if len(m.Mid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Mid)))
		i += copy(dAtA[i:], m.Mid)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.AppVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.AppVersion)))
		i += copy(dAtA[i:], m.AppVersion)
	}
	if len(m.AppChannel) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.AppChannel)))
		i += copy(dAtA[i:], m.AppChannel)
	}
	if len(m.AppType) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.AppType)))
		i += copy(dAtA[i:], m.AppType)
	}
	if len(m.Env) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Env)))
		i += copy(dAtA[i:], m.Env)
	}
	if len(m.Os) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	if len(m.OsVersion) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.OsVersion)))
		i += copy(dAtA[i:], m.OsVersion)
	}
	if len(m.DeviceModel) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.DeviceModel)))
		i += copy(dAtA[i:], m.DeviceModel)
	}
	if len(m.DeviceVendor) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.DeviceVendor)))
		i += copy(dAtA[i:], m.DeviceVendor)
	}
	if len(m.DeviceBrand) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.DeviceBrand)))
		i += copy(dAtA[i:], m.DeviceBrand)
	}
	if len(m.ScreenSize) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.ScreenSize)))
		i += copy(dAtA[i:], m.ScreenSize)
	}
	if m.ScreenWidth != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.ScreenWidth))
	}
	if m.ScreenHeight != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.ScreenHeight))
	}
	if len(m.ScreenResolution) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.ScreenResolution)))
		i += copy(dAtA[i:], m.ScreenResolution)
	}
	if len(m.Imei) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Imei)))
		i += copy(dAtA[i:], m.Imei)
	}
	if len(m.AndroidId) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.AndroidId)))
		i += copy(dAtA[i:], m.AndroidId)
	}
	if len(m.Idfa) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Idfa)))
		i += copy(dAtA[i:], m.Idfa)
	}
	if len(m.Oaid) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Oaid)))
		i += copy(dAtA[i:], m.Oaid)
	}
	if m.Carrier != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.Carrier))
	}
	if m.Network != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.Network))
	}
	if len(m.Lon) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Lon)))
		i += copy(dAtA[i:], m.Lon)
	}
	if len(m.Lat) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Lat)))
		i += copy(dAtA[i:], m.Lat)
	}
	if len(m.Mac) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Mac)))
		i += copy(dAtA[i:], m.Mac)
	}
	return i, nil
}

func (m *EventLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLogs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Common != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.Common.Size()))
		n1, err1 := m.Common.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEventLog(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEventLog(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintEventLog(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	if m.EventTime != 0 {
		n += 1 + sovEventLog(uint64(m.EventTime))
	}
	if m.LoggedTime != 0 {
		n += 1 + sovEventLog(uint64(m.LoggedTime))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Udid)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Tkid)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Mid)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.AppChannel)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.AppType)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Os)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.OsVersion)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.DeviceModel)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.DeviceVendor)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.DeviceBrand)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.ScreenSize)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	if m.ScreenWidth != 0 {
		n += 2 + sovEventLog(uint64(m.ScreenWidth))
	}
	if m.ScreenHeight != 0 {
		n += 2 + sovEventLog(uint64(m.ScreenHeight))
	}
	l = len(m.ScreenResolution)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Imei)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.AndroidId)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Idfa)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Oaid)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	if m.Carrier != 0 {
		n += 2 + sovEventLog(uint64(m.Carrier))
	}
	if m.Network != 0 {
		n += 2 + sovEventLog(uint64(m.Network))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.IpCountry)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.IpProvince)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.IpCity)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Lon)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Lat)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Mac)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.PageId)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.PvId)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.LayoutId)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.PageKey)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.ModuleId)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.ActionType)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.RefPageId)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.RefPvId)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.RefLayoutId)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.RefPageKey)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.RefModuleId)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Referer)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	if m.Duration != 0 {
		n += 2 + sovEventLog(uint64(m.Duration))
	}
	if len(m.ExtendInfo) > 0 {
		for k, v := range m.ExtendInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEventLog(uint64(len(k))) + 1 + len(v) + sovEventLog(uint64(len(v)))
			n += mapEntrySize + 2 + sovEventLog(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EventLogCommon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Udid)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Tkid)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Mid)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.AppChannel)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.AppType)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.OsVersion)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.DeviceModel)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.DeviceVendor)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.DeviceBrand)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	l = len(m.ScreenSize)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	if m.ScreenWidth != 0 {
		n += 2 + sovEventLog(uint64(m.ScreenWidth))
	}
	if m.ScreenHeight != 0 {
		n += 2 + sovEventLog(uint64(m.ScreenHeight))
	}
	l = len(m.ScreenResolution)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Imei)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.AndroidId)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Idfa)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Oaid)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	if m.Carrier != 0 {
		n += 2 + sovEventLog(uint64(m.Carrier))
	}
	if m.Network != 0 {
		n += 2 + sovEventLog(uint64(m.Network))
	}
	l = len(m.Lon)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Lat)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	l = len(m.Mac)
	if l > 0 {
		n += 2 + l + sovEventLog(uint64(l))
	}
	return n
}

func (m *EventLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Common != nil {
		l = m.Common.Size()
		n += 1 + l + sovEventLog(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovEventLog(uint64(l))
		}
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovEventLog(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEventLog(uint64(l))
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovEventLog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEventLog(x uint64) (n int) {
	return sovEventLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTime", wireType)
			}
			m.EventTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggedTime", wireType)
			}
			m.LoggedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoggedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Udid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tkid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tkid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceVendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceVendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceBrand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceBrand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScreenSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenWidth", wireType)
			}
			m.ScreenWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreenWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenHeight", wireType)
			}
			m.ScreenHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreenHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenResolution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScreenResolution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndroidId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndroidId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idfa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idfa = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oaid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Carrier", wireType)
			}
			m.Carrier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Carrier |= EventLog_Carrier(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= EventLog_Network(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpCountry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpCountry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProvince", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpProvince = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpCity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PvId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PvId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayoutId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LayoutId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefPageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefPageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefPvId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefPvId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefLayoutId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefLayoutId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefPageKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefPageKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefModuleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefModuleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtendInfo == nil {
				m.ExtendInfo = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEventLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEventLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEventLog
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEventLog
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEventLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEventLog
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthEventLog
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEventLog(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEventLog
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtendInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLogCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLogCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLogCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Udid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tkid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tkid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceVendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceVendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceBrand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceBrand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScreenSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenWidth", wireType)
			}
			m.ScreenWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreenWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenHeight", wireType)
			}
			m.ScreenHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreenHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenResolution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScreenResolution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndroidId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndroidId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idfa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idfa = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oaid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Carrier", wireType)
			}
			m.Carrier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Carrier |= EventLog_Carrier(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= EventLog_Network(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Common == nil {
				m.Common = &EventLogCommon{}
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &EventLog{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEventLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEventLog
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEventLog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEventLog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEventLog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEventLog
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEventLog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventLog   = fmt.Errorf("proto: integer overflow")
)
